@namespace SQLFlowUi.Components
@using SQLFlowUi.Controllers
@using SQLFlowUi.Services
@inject IJSRuntime JSRuntime
@inject DocumentationService DocService

<div class="editor-section">
    <!-- Buttons row above the editor -->
    <div class="editor-buttons-row">
        <div class="editor-buttons-container">
            @if (EnablePaste)
            {
                <RadzenButton Click="@PasteCallback"
                              Icon="input"
                              Size="ButtonSize.Small"
                              ButtonStyle="ButtonStyle.Primary"
                              Variant="Variant.Flat"
                              Style="margin-right: 5px;" />
            }

            @if (!string.IsNullOrEmpty(HelpDocPath))
            {
                <RadzenButton Click="@(args => DocService.OpenSysDoc(HelpDocPath))"
                              MouseEnter="@(args => DocService.ShowTooltip(args, HelpDocPath))"
                              Icon="help_outline"
                              Size="ButtonSize.Small"
                              ButtonStyle="ButtonStyle.Dark"
                              Variant="Variant.Flat"
                              Style="margin-right: 5px;" />
            }

            <RadzenButton Click="@ToggleFullScreen"
                          Icon="@(IsFullScreen ? "fullscreen_exit" : "fullscreen")"
                          Size="ButtonSize.Small"
                          ButtonStyle="ButtonStyle.Secondary"
                          Variant="Variant.Flat" />
        </div>
    </div>

    <!-- Editor container -->
    <div class="editor-container @(IsFullScreen ? "fullscreen" : "")">
        <CodeMirror6Wrapper @bind-Doc="@CodeValue"
                            Language="@EditorLanguage"
                            OnChange="@UpdateCodeValue"
                            LineNumbers="true"
                            Theme="@EditorTheme"
                            FullScreen="@IsFullScreen"
                            LineWrapping="true"
                            ScrollPastEnd="false"
                            AllowHorizontalResize="false"
                            AllowVerticalResize="false"
                            Editable="@(!IsReadOnly)"
                            ReadOnly="@IsReadOnly"
                            MaxHeight="@MaxHeight"
                            MinHeight="@MinHeight">
        </CodeMirror6Wrapper>
    </div>
</div>

<style>
    .editor-section {
        width: 100%;
        display: flex;
        flex-direction: column;
    }

    .editor-buttons-row {
        width: 100%;
        display: flex;
        justify-content: flex-end;
        padding-bottom: 5px;
        margin-bottom: 5px;
    }

    .editor-buttons-container {
        display: flex;
        flex-direction: row;
    }

    .editor-container {
        position: relative;
        width: 100%;
        overflow: auto;
        max-height: 400px;
        border: 1px solid #ccc;
        background-color: #f9f9f9;
    }

        .editor-container.fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            z-index: 9999;
            max-height: none;
            background-color: white;
            padding: 20px;
        }
</style>

@code {
    [Parameter]
    public string CodeValue { get; set; }

    [Parameter]
    public EventCallback<string> CodeValueChanged { get; set; }

    [Parameter]
    public CodeMirrorLanguage EditorLanguage { get; set; } = CodeMirrorLanguage.Csharp;

    [Parameter]
    public ThemeMirrorTheme EditorTheme { get; set; } = ThemeMirrorTheme.GithubDark;

    [Parameter]
    public bool EnablePaste { get; set; } = true;

    [Parameter]
    public string HelpDocPath { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; } = false;

    [Parameter]
    public string MaxHeight { get; set; } = "400px";

    [Parameter]
    public string MinHeight { get; set; } = "200px";

    [Parameter]
    public EventCallback PasteCallback { get; set; }

    private bool IsFullScreen { get; set; } = false;

    private void ToggleFullScreen()
    {
        IsFullScreen = !IsFullScreen;
        StateHasChanged();
    }

    private async Task UpdateCodeValue(string value)
    {
        Console.WriteLine($"Code updated to: {value?.Substring(0, Math.Min(20, value?.Length ?? 0))}...");
        CodeValue = value;
        StateHasChanged();
        await CodeValueChanged.InvokeAsync(value);
        
    }
}